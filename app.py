import streamlit as st
import pandas as pd
import numpy as np
from datetime import timedelta
from streamlit_option_menu import option_menu
import plotly.express as px
from ultralytics import YOLO
from PIL import Image
import io

# --- CONFIGURACI√ìN VISUAL ---
PRIMARY_COLOR = "#1f77b4"
ACCENT_COLOR = "#ff7f0e"
BACKGROUND_COLOR = "#f0f2f6"
FONT_FAMILY = "Arial, sans-serif"

st.set_page_config(page_title="AI Agents + Video Analytics", layout="wide", page_icon="ü§ñ")

# --- ESTILOS CSS PARA EST√âTICA MODERNA ---
st.markdown(f"""
    <style>
        /* Estilos generales para el fondo y la fuente de la aplicaci√≥n */
        .stApp {{
            background: linear-gradient(135deg, #e0eafc 0%, #cfdef3 100%);
            color: #333;
            font-family: {FONT_FAMILY};
        }}
        /* Estilos para el sidebar */
        .sidebar .sidebar-content {{
            background-color: {PRIMARY_COLOR};
            color: white;
            font-family: {FONT_FAMILY};
        }}
        /* Estilos para los botones de Streamlit */
        .stButton>button {{
            background-color: {ACCENT_COLOR};
            color: white;
            border-radius: 8px;
            padding: 8px 16px;
            font-weight: bold;
            border: none; /* Eliminar borde para un look m√°s limpio */
            transition: background-color 0.3s ease; /* Suavizar transici√≥n al hover */
        }}
        .stButton>button:hover {{
            background-color: #e67300;
            color: white;
        }}
        /* Estilos para los selectbox y otros widgets */
        .stSelectbox > div, .stSlider > div > div > div, .stRadio > label {{
            font-size: 16px;
            font-weight: 600;
            color: #333;
        }}
        /* Mejorar la legibilidad de los t√≠tulos de secci√≥n */
        h1 {{
            color: {PRIMARY_COLOR};
            text-align: center;
            font-weight: 700;
            margin-bottom: 20px;
        }}
        h3 {{
            color: {PRIMARY_COLOR};
            font-weight: 600;
            margin-top: 25px;
            margin-bottom: 15px;
        }}
        h4 {{
            color: #555;
            font-weight: 500;
            margin-top: 20px;
            margin-bottom: 10px;
        }}
        /* Estilos para los mensajes de informaci√≥n/error/√©xito */
        .stAlert {{
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 20px;
        }}
        /* Estilo para tablas de Streamlit para mejor visualizaci√≥n */
        .dataframe {{
            font-size: 0.9em;
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }}
        .dataframe th, .dataframe td {{
            padding: 8px 12px;
            border: 1px solid #ddd;
            text-align: left;
        }}
        .dataframe th {{
            background-color: {PRIMARY_COLOR};
            color: white;
            font-weight: bold;
        }}
    </style>
""", unsafe_allow_html=True)

# --- MEN√ö LATERAL ---
with st.sidebar:
    selected = option_menu(
        menu_title="Men√∫ Principal",
        options=["Predicci√≥n Demanda", "An√°lisis Archivos", "An√°lisis de Im√°genes", "Configuraci√≥n"],
        icons=["bar-chart-line", "file-earmark-text", "image", "gear"],
        menu_icon="cast",
        default_index=0,
        styles={
            "container": {"padding": "5px", "background-color": PRIMARY_COLOR},
            "icon": {"color": "white", "font-size": "20px"},
            "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": ACCENT_COLOR},
            "nav-link-selected": {"background-color": ACCENT_COLOR},
        }
    )

# --- FUNCIONES ---

# Diccionario para traducir las etiquetas de YOLOv8 a espa√±ol
# Puedes a√±adir m√°s traducciones aqu√≠ seg√∫n las clases que detecte tu modelo
LABEL_TRANSLATIONS = {
    'person': 'Persona',
    'bicycle': 'Bicicleta',
    'car': 'Coche',
    'motorcycle': 'Motocicleta',
    'airplane': 'Avi√≥n',
    'bus': 'Autob√∫s',
    'train': 'Tren',
    'truck': 'Cami√≥n',
    'boat': 'Barco',
    'traffic light': 'Sem√°foro',
    'fire hydrant': 'Boca de Incendios',
    'stop sign': 'Se√±al de Stop',
    'parking meter': 'Parqu√≠metro',
    'bench': 'Banco',
    'bird': 'P√°jaro',
    'cat': 'Gato',
    'dog': 'Perro',
    'horse': 'Caballo',
    'sheep': 'Oveja',
    'cow': 'Vaca',
    'elephant': 'Elefante',
    'bear': 'Oso',
    'zebra': 'Cebra',
    'giraffe': 'Jirafa',
    'backpack': 'Mochila',
    'umbrella': 'Paraguas',
    'handbag': 'Bolso',
    'tie': 'Corbata',
    'suitcase': 'Maleta',
    'frisbee': 'Frisbee',
    'skis': 'Esqu√≠s',
    'snowboard': 'Tabla de Snow',
    'sports ball': 'Pelota de Deporte',
    'kite': 'Cometa',
    'baseball bat': 'Bate de B√©isbol',
    'baseball glove': 'Guante de B√©isbol',
    'skateboard': 'Monopat√≠n',
    'surfboard': 'Tabla de Surf',
    'tennis racket': 'Raqueta de Tenis',
    'bottle': 'Botella',
    'wine glass': 'Copa de Vino',
    'cup': 'Taza',
    'fork': 'Tenedor',
    'knife': 'Cuchillo',
    'spoon': 'Cuchara',
    'bowl': 'Cuenco',
    'banana': 'Pl√°tano',
    'apple': 'Manzana',
    'sandwich': 'S√°ndwich',
    'orange': 'Naranja',
    'broccoli': 'Br√≥coli',
    'carrot': 'Zanahoria',
    'hot dog': 'Perrito Caliente',
    'pizza': 'Pizza',
    'donut': 'Dona',
    'cake': 'Tarta',
    'chair': 'Silla',
    'couch': 'Sof√°',
    'potted plant': 'Planta en Maceta',
    'bed': 'Cama',
    'dining table': 'Mesa de Comedor',
    'toilet': 'Inodoro',
    'tv': 'Televisi√≥n',
    'laptop': 'Port√°til',
    'mouse': 'Rat√≥n',
    'remote': 'Mando a Distancia',
    'keyboard': 'Teclado',
    'cell phone': 'Tel√©fono M√≥vil',
    'microwave': 'Microondas',
    'oven': 'Horno',
    'toaster': 'Tostadora',
    'sink': 'Fregadero',
    'refrigerator': 'Refrigerador',
    'book': 'Libro',
    'clock': 'Reloj',
    'vase': 'Jarr√≥n',
    'scissors': 'Tijeras',
    'teddy bear': 'Oso de Peluche',
    'hair drier': 'Secador de Pelo',
    'toothbrush': 'Cepillo de Dientes'
}


def predict_demand_section():
    st.title("üìä Predicci√≥n de Demanda")
    st.markdown("""
    Esta herramienta te permite pronosticar la demanda futura de tus productos bas√°ndose en datos hist√≥ricos.
    Por favor, sube un archivo CSV con las siguientes columnas:

    - üìÖ **fecha** (formato:YYYY-MM-DD)  
    - ‚òïÔ∏è **producto** (nombre del producto, por ejemplo: "Caf√©", "T√©", "Pastel")  
    - üî¢ **cantidad** (unidades vendidas o demandadas)

    **Instrucciones:**
    1. Sube tu archivo CSV utilizando el bot√≥n de abajo.
    2. Selecciona el producto para el cual deseas generar la predicci√≥n.
    3. Ajusta la "Ventana para promedio m√≥vil" para suavizar los datos hist√≥ricos.
    4. Modifica el "Factor de crecimiento esperado" seg√∫n tus expectativas futuras.
    5. Define el n√∫mero de "D√≠as a predecir" para tu pron√≥stico.
    """)

    uploaded_file = st.file_uploader("Sube tu archivo CSV de datos hist√≥ricos aqu√≠", type=["csv"])
    if uploaded_file:
        try:
            df = pd.read_csv(uploaded_file, parse_dates=['fecha'])
            df = df.sort_values(['producto', 'fecha'])

            st.subheader("‚úÖ Datos hist√≥ricos cargados correctamente")
            st.dataframe(df) # Muestra todo el DataFrame cargado inicialmente

            # Filtrar datos por producto
            productos = df['producto'].unique()
            producto_sel = st.selectbox("üëâ Selecciona el producto para el cual deseas predecir la demanda", productos)

            df_producto = df[df['producto'] == producto_sel].copy()

            # Par√°metros para la predicci√≥n
            st.subheader("‚öôÔ∏è Par√°metros de Predicci√≥n")
            window = st.slider("Ventana para promedio m√≥vil (n√∫mero de d√≠as a considerar para el promedio)", 2, 10, 3, help="Define cu√°ntos d√≠as anteriores se usan para calcular el promedio m√≥vil. Un valor m√°s alto suaviza las fluctuaciones.")
            growth_factor = st.slider("Factor de crecimiento esperado (ej: 1.1 para un 10% de crecimiento diario)", 1.0, 2.0, 1.05, 0.01, help="Establece el factor por el cual se espera que la demanda crezca cada d√≠a en el futuro. 1.0 significa sin crecimiento, 1.1 un 10% de crecimiento diario.")
            forecast_days = st.slider("D√≠as a predecir (n√∫mero de d√≠as futuros para el pron√≥stico)", 1, 30, 7, help="Determina cu√°ntos d√≠as hacia adelante deseas pronosticar la demanda.")

            # C√°lculo de promedio m√≥vil y predicci√≥n
            df_producto['promedio_movil'] = df_producto['cantidad'].rolling(window=window).mean().round(2) # Redondeado para mejor visualizaci√≥n
            
            # Asegurarse de que hay datos suficientes para el promedio
            if not df_producto['promedio_movil'].dropna().empty:
                last_avg = df_producto['promedio_movil'].iloc[-1]
            else:
                st.warning("No hay suficientes datos para calcular el promedio m√≥vil. Ajusta la ventana o el dataset.")
                last_avg = df_producto['cantidad'].mean() if not df_producto['cantidad'].empty else 0
                st.info(f"Usando el promedio simple de cantidad ({last_avg:.2f}) para la predicci√≥n debido a datos insuficientes para el promedio m√≥vil.")


            future_dates = [df_producto['fecha'].iloc[-1] + timedelta(days=i) for i in range(1, forecast_days + 1)]
            # Calcular el pron√≥stico aplicando el factor de crecimiento acumulativamente
            forecast_values = []
            current_forecast_value = last_avg
            for i in range(forecast_days):
                current_forecast_value *= growth_factor
                forecast_values.append(round(current_forecast_value)) # Redondeado a entero para cantidades

            forecast_df = pd.DataFrame({'fecha': future_dates, 'cantidad_prevista': forecast_values})

            st.subheader(f"üìà Pron√≥stico de Demanda para: **{producto_sel}**")

            # Combinar datos hist√≥ricos y previstos para el gr√°fico
            combined = pd.concat([
                df_producto.set_index('fecha')['cantidad'].rename('Cantidad Hist√≥rica'),
                forecast_df.set_index('fecha')['cantidad_prevista'].rename('Cantidad Prevista')
            ], axis=1).reset_index()
            
            # Gr√°fico interactivo con Plotly Express
            fig = px.line(
                combined, 
                x='fecha', 
                y=['Cantidad Hist√≥rica', 'Cantidad Prevista'],
                title=f'Demanda Hist√≥rica y Pron√≥stico para {producto_sel}',
                labels={'value': 'Cantidad', 'fecha': 'Fecha', 'variable': 'Tipo de Cantidad'},
                color_discrete_map={
                    'Cantidad Hist√≥rica': PRIMARY_COLOR, 
                    'Cantidad Prevista': ACCENT_COLOR
                },
                template="plotly_white" # Estilo de fondo del gr√°fico
            )
            
            # Mejoras al gr√°fico: l√≠neas m√°s gruesas, marcadores, rango en el eje Y
            fig.update_traces(mode='lines+markers', hovertemplate="Fecha: %{x}<br>Cantidad: %{y}<extra></extra>")
            fig.update_layout(
                hovermode="x unified",
                xaxis_title="Fecha",
                yaxis_title="Cantidad de Unidades",
                legend_title="Leyenda",
                font=dict(family=FONT_FAMILY),
                margin=dict(l=0, r=0, t=50, b=0) # Ajustar m√°rgenes
            )
            # A√±adir una l√≠nea vertical para separar datos hist√≥ricos de previstos
            if not df_producto.empty:
                last_historical_date = df_producto['fecha'].iloc[-1]
                fig.add_vline(x=last_historical_date, line_width=2, line_dash="dash", line_color="grey", 
                              annotation_text="Inicio del Pron√≥stico", annotation_position="top right")

            st.plotly_chart(fig, use_container_width=True) # <-- CORRECCI√ìN: use_container_width
            
            st.markdown("### üìã Tabla Detallada del Pron√≥stico")
            # Presenta la tabla de pron√≥stico con un formato m√°s amigable
            st.dataframe(forecast_df.rename(columns={'fecha': 'Fecha', 'cantidad_prevista': 'Cantidad Prevista (Unidades)'}).set_index('Fecha'))
            
        except pd.errors.EmptyDataError:
            st.error("El archivo CSV est√° vac√≠o. Por favor, sube un archivo con datos.")
        except KeyError as ke:
            st.error(f"Faltan columnas requeridas en tu CSV. Aseg√∫rate de tener 'fecha', 'producto' y 'cantidad'. Error: {ke}")
        except Exception as e:
            st.error(f"Ocurri√≥ un error inesperado al procesar el archivo: {e}")
            st.info("Aseg√∫rate de que el formato de la fecha sea YYYY-MM-DD y que todas las columnas necesarias est√©n presentes.")
    else:
        st.info("‚¨ÜÔ∏è Carga tu archivo CSV para comenzar el an√°lisis de predicci√≥n de demanda.")


def file_analysis_section():
    st.title("üîç An√°lisis Exploratorio de Archivos CSV")
    st.markdown("""
    Esta secci√≥n te permite explorar y entender la estructura de tus archivos CSV.
    Sube un archivo CSV para visualizar sus datos, estad√≠sticas descriptivas y la distribuci√≥n de sus columnas num√©ricas.
    """)
    uploaded_file = st.file_uploader("Sube tu archivo CSV aqu√≠", type=["csv"])
    if uploaded_file:
        try:
            df = pd.read_csv(uploaded_file)
            
            st.subheader("‚úÖ Vista Previa de los Datos (Primeras 10 filas)")
            st.dataframe(df.head(10))
            
            st.subheader("üìä Estad√≠sticas Descriptivas")
            st.write(df.describe(include='all').T.round(2)) # .T para transponer y round para mejor lectura
            
            numeric_cols = df.select_dtypes(include=np.number).columns.tolist()
            if numeric_cols:
                st.subheader("üìà Visualizaci√≥n de Distribuciones Num√©ricas")
                col_sel = st.selectbox("üëâ Selecciona una columna num√©rica para visualizar su distribuci√≥n (Histograma)", numeric_cols)
                
                fig = px.histogram(df, x=col_sel, nbins=30, 
                                   title=f"Distribuci√≥n de Frecuencia de '{col_sel}'",
                                   labels={col_sel: col_sel, 'count': 'Frecuencia'},
                                   template="plotly_white",
                                   color_discrete_sequence=[PRIMARY_COLOR]) # Color del histograma
                
                fig.update_layout(
                    xaxis_title=col_sel,
                    yaxis_title="Frecuencia de Aparici√≥n",
                    font=dict(family=FONT_FAMILY),
                    margin=dict(l=0, r=0, t=50, b=0)
                )
                st.plotly_chart(fig, use_container_width=True) # <-- CORRECCI√ìN: use_container_width

                # Gr√°fico de caja para outliers
                st.subheader(f"üì¶ Detecci√≥n de Valores At√≠picos para '{col_sel}'")
                fig_box = px.box(df, y=col_sel, 
                                 title=f"Diagrama de Caja de '{col_sel}' (Identificaci√≥n de At√≠picos)",
                                 labels={col_sel: col_sel},
                                 template="plotly_white",
                                 color_discrete_sequence=[ACCENT_COLOR])
                fig_box.update_layout(
                    yaxis_title=col_sel,
                    font=dict(family=FONT_FAMILY),
                    margin=dict(l=0, r=0, t=50, b=0)
                )
                st.plotly_chart(fig_box, use_container_width=True) # <-- CORRECCI√ìN: use_container_width

            else:
                st.info("‚ÑπÔ∏è No se encontraron columnas num√©ricas en el archivo para generar gr√°ficos de distribuci√≥n.")
            
        except pd.errors.EmptyDataError:
            st.error("El archivo CSV est√° vac√≠o. Por favor, sube un archivo con datos.")
        except Exception as e:
            st.error(f"Ocurri√≥ un error inesperado al procesar el archivo: {e}")
            st.info("Aseg√∫rate de que el archivo es un CSV v√°lido y no est√° corrupto.")
    else:
        st.info("‚¨ÜÔ∏è Sube un archivo CSV para comenzar el an√°lisis exploratorio.")

def image_analysis_section():
    st.title("üì∏ An√°lisis Inteligente de Im√°genes con IA")
    st.markdown("""
    Esta secci√≥n utiliza modelos avanzados de Inteligencia Artificial (YOLOv8) para detectar y clasificar objetos dentro de las im√°genes que subas.
    Simplemente carga tu imagen y la IA har√° el resto.
    """)
    uploaded_file = st.file_uploader("Sube tu imagen aqu√≠ (formatos soportados: JPG, JPEG, PNG)", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        try:
            st.info("‚úÖ Imagen subida. Procesando...") # Mensaje de depuraci√≥n
            img_bytes = uploaded_file.read()
            img = Image.open(io.BytesIO(img_bytes))
            st.image(img, caption="Imagen Original Cargada", use_container_width=True) # <-- CORRECCI√ìN: use_container_width
            
            st.info("‚öôÔ∏è Cargando el modelo de detecci√≥n de objetos (YOLOv8n)...") # Mensaje de depuraci√≥n
            model = YOLO('yolov8n.pt')  # El modelo se descargar√° si no est√° en cach√©
            st.info("‚úÖ Modelo YOLOv8 cargado. Iniciando detecci√≥n...") # Mensaje de depuraci√≥n
            
            # Realiza la detecci√≥n de objetos
            results = model(img)
            st.info("‚ú® Detecci√≥n de objetos completada.") # Mensaje de depuraci√≥n
            
            st.subheader("üñºÔ∏è Imagen con Objetos Detectados")
            # results[0].plot() devuelve una imagen de NumPy con las cajas y etiquetas dibujadas
            res_img_array = results[0].plot() # Esto es un array de NumPy
            st.image(res_img_array, caption="Objetos Detectados por la IA", use_container_width=True) # <-- CORRECCI√ìN: use_container_width
            
            st.markdown("### üìã Detalles de los Objetos Detectados")
            detections = results[0].boxes.data.cpu().numpy() if results[0].boxes is not None else []
            
            if len(detections) > 0:
                labels = results[0].names
                data = []
                for box in detections:
                    # Coordenadas de la caja y puntuaci√≥n de confianza
                    x1, y1, x2, y2, score, class_id = box
                    original_label = labels[int(class_id)]
                    translated_label = LABEL_TRANSLATIONS.get(original_label, original_label) # Traduce la etiqueta
                    
                    data.append({
                        "Etiqueta de Objeto": translated_label, # <-- ETIQUETA TRADUCIDA
                        "Confianza (%)": f"{round(score * 100, 2)}%", # Formateado como porcentaje
                        "Coordenadas de la Caja": f"[{int(x1)}, {int(y1)}, {int(x2)}, {int(y2)}]" # Formato [x1, y1, x2, y2]
                        # "√Årea de la Caja (px)": f"{(int(x2)-int(x1)) * (int(y2)-int(y1))} px¬≤" # Podr√≠as a√±adir el √°rea si es relevante
                    })
                
                # Crear un DataFrame para mostrar en una tabla
                detections_df = pd.DataFrame(data)
                st.dataframe(detections_df)
                
            else:
                st.info("üòî No se detectaron objetos significativos en la imagen.")
                
        except Exception as e:
            st.error(f"‚ùå Ocurri√≥ un error inesperado al procesar la imagen: {e}")
            st.error("Por favor, verifica el formato de la imagen y los logs de la aplicaci√≥n para m√°s detalles.")
    else:
        st.info("‚¨ÜÔ∏è Sube una imagen para que la IA la analice y detecte objetos.")


def settings_section():
    st.title("‚öôÔ∏è Configuraci√≥n de la Aplicaci√≥n")
    st.markdown("""
    Esta secci√≥n est√° reservada para futuras configuraciones y personalizaciones de la aplicaci√≥n.
    Actualmente, no hay opciones de configuraci√≥n disponibles.
    """)
    st.info("Pr√≥ximamente: ¬°Nuevas opciones de personalizaci√≥n aqu√≠!")

# --- RUTEO DE SECCIONES ---
if selected == "Predicci√≥n Demanda":
    predict_demand_section()
elif selected =
